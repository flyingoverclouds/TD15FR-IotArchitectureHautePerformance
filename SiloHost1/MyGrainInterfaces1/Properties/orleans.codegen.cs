//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34209
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace CityPowerInterfaces
{
    using System;
    using System.Net;
    using System.Runtime.Serialization;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using Orleans.Serialization;
    using CityPowerInterfaces;
    using Orleans;
    using Orleans.Runtime;
    using System.Collections;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class ApartmentFactory
    {
        

                        public static CityPowerInterfaces.IApartment GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IApartment), -1442442835, primaryKey));
                        }

                        public static CityPowerInterfaces.IApartment GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IApartment), -1442442835, primaryKey, grainClassNamePrefix));
                        }

                        public static CityPowerInterfaces.IApartment GetGrain(System.Guid primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IApartment), -1442442835, primaryKey));
                        }

                        public static CityPowerInterfaces.IApartment GetGrain(System.Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IApartment), -1442442835, primaryKey, grainClassNamePrefix));
                        }

            public static CityPowerInterfaces.IApartment Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return ApartmentReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("CityPowerInterfaces.CityPowerInterfaces.IApartment")]
        internal class ApartmentReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, CityPowerInterfaces.IApartment
        {
            

            public static CityPowerInterfaces.IApartment Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (CityPowerInterfaces.IApartment) global::Orleans.Runtime.GrainReference.CastInternal(typeof(CityPowerInterfaces.IApartment), (global::Orleans.Runtime.GrainReference gr) => { return new ApartmentReference(gr);}, grainRef, -1442442835);
            }
            
            protected internal ApartmentReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal ApartmentReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return -1442442835;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "CityPowerInterfaces.CityPowerInterfaces.IApartment";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                ApartmentReference input = ((ApartmentReference)(original));
                return ((ApartmentReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                ApartmentReference input = ((ApartmentReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return ApartmentReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return ApartmentMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task CityPowerInterfaces.IApartment.SetPowerForLine(long @powerLineId, int @currentPower)
            {

                return base.InvokeMethodAsync<object>(1370228790, new object[] {@powerLineId, @currentPower} );
            }
            
            System.Threading.Tasks.Task<int> CityPowerInterfaces.IApartment.GetCurrentPower()
            {

                return base.InvokeMethodAsync<System.Int32>(-449473587, new object[] {} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("CityPowerInterfaces.CityPowerInterfaces.IApartment", -1442442835)]
    internal class ApartmentMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return -1442442835;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case -1442442835:  // IApartment
                        switch (methodId)
                        {
                            case 1370228790: 
                                return ((IApartment)grain).SetPowerForLine((Int64)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -449473587: 
                                return ((IApartment)grain).GetCurrentPower().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case -1442442835:  // IApartment
                    switch (methodId)
                    {
                        case 1370228790:
                            return "SetPowerForLine";
                    case -449473587:
                            return "GetCurrentPower";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class BuildingFactory
    {
        

                        public static CityPowerInterfaces.IBuilding GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IBuilding), 2040282744, primaryKey));
                        }

                        public static CityPowerInterfaces.IBuilding GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IBuilding), 2040282744, primaryKey, grainClassNamePrefix));
                        }

                        public static CityPowerInterfaces.IBuilding GetGrain(System.Guid primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IBuilding), 2040282744, primaryKey));
                        }

                        public static CityPowerInterfaces.IBuilding GetGrain(System.Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IBuilding), 2040282744, primaryKey, grainClassNamePrefix));
                        }

            public static CityPowerInterfaces.IBuilding Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return BuildingReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("CityPowerInterfaces.CityPowerInterfaces.IBuilding")]
        internal class BuildingReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, CityPowerInterfaces.IBuilding
        {
            

            public static CityPowerInterfaces.IBuilding Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (CityPowerInterfaces.IBuilding) global::Orleans.Runtime.GrainReference.CastInternal(typeof(CityPowerInterfaces.IBuilding), (global::Orleans.Runtime.GrainReference gr) => { return new BuildingReference(gr);}, grainRef, 2040282744);
            }
            
            protected internal BuildingReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal BuildingReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 2040282744;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "CityPowerInterfaces.CityPowerInterfaces.IBuilding";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                BuildingReference input = ((BuildingReference)(original));
                return ((BuildingReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                BuildingReference input = ((BuildingReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return BuildingReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return BuildingMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task CityPowerInterfaces.IBuilding.SetPowerForApartment(long @apartmentId, int @currentPower)
            {

                return base.InvokeMethodAsync<object>(1047791444, new object[] {@apartmentId, @currentPower} );
            }
            
            System.Threading.Tasks.Task<int> CityPowerInterfaces.IBuilding.GetCurrentPower()
            {

                return base.InvokeMethodAsync<System.Int32>(-449473587, new object[] {} );
            }
            
            System.Threading.Tasks.Task<System.Collections.Generic.List<CityPowerInterfaces.PowerMeasurement>> CityPowerInterfaces.IBuilding.GetPowerByApartments()
            {

                return base.InvokeMethodAsync<System.Collections.Generic.List<CityPowerInterfaces.PowerMeasurement>>(-1266728070, new object[] {} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("CityPowerInterfaces.CityPowerInterfaces.IBuilding", 2040282744)]
    internal class BuildingMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 2040282744;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 2040282744:  // IBuilding
                        switch (methodId)
                        {
                            case 1047791444: 
                                return ((IBuilding)grain).SetPowerForApartment((Int64)arguments[0], (Int32)arguments[1]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -449473587: 
                                return ((IBuilding)grain).GetCurrentPower().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case -1266728070: 
                                return ((IBuilding)grain).GetPowerByApartments().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 2040282744:  // IBuilding
                    switch (methodId)
                    {
                        case 1047791444:
                            return "SetPowerForApartment";
                    case -449473587:
                            return "GetCurrentPower";
                    case -1266728070:
                            return "GetPowerByApartments";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PowerLineFactory
    {
        

                        public static CityPowerInterfaces.IPowerLine GetGrain(long primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IPowerLine), 1529258251, primaryKey));
                        }

                        public static CityPowerInterfaces.IPowerLine GetGrain(long primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IPowerLine), 1529258251, primaryKey, grainClassNamePrefix));
                        }

                        public static CityPowerInterfaces.IPowerLine GetGrain(System.Guid primaryKey)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IPowerLine), 1529258251, primaryKey));
                        }

                        public static CityPowerInterfaces.IPowerLine GetGrain(System.Guid primaryKey, string grainClassNamePrefix)
                        {
                            return Cast(global::Orleans.CodeGeneration.GrainFactoryBase.MakeGrainReferenceInternal(typeof(CityPowerInterfaces.IPowerLine), 1529258251, primaryKey, grainClassNamePrefix));
                        }

            public static CityPowerInterfaces.IPowerLine Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return PowerLineReference.Cast(grainRef);
            }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("CityPowerInterfaces.CityPowerInterfaces.IPowerLine")]
        internal class PowerLineReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, CityPowerInterfaces.IPowerLine
        {
            

            public static CityPowerInterfaces.IPowerLine Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (CityPowerInterfaces.IPowerLine) global::Orleans.Runtime.GrainReference.CastInternal(typeof(CityPowerInterfaces.IPowerLine), (global::Orleans.Runtime.GrainReference gr) => { return new PowerLineReference(gr);}, grainRef, 1529258251);
            }
            
            protected internal PowerLineReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal PowerLineReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 1529258251;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "CityPowerInterfaces.CityPowerInterfaces.IPowerLine";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PowerLineReference input = ((PowerLineReference)(original));
                return ((PowerLineReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PowerLineReference input = ((PowerLineReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PowerLineReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return PowerLineMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            System.Threading.Tasks.Task CityPowerInterfaces.IPowerLine.SetPowerCurrent(int @powerWatt)
            {

                return base.InvokeMethodAsync<object>(-1348462830, new object[] {@powerWatt} );
            }
            
            System.Threading.Tasks.Task<int> CityPowerInterfaces.IPowerLine.GetCurrentPower()
            {

                return base.InvokeMethodAsync<System.Int32>(-449473587, new object[] {} );
            }
            
            System.Threading.Tasks.Task CityPowerInterfaces.IPowerLine.SubscribeForPowerNotifications(CityPowerInterfaces.IPowerLineObserver @subscriber)
            {
global::Orleans.CodeGeneration.GrainFactoryBase.CheckGrainObserverParamInternal(@subscriber);

                return base.InvokeMethodAsync<object>(1042716812, new object[] {@subscriber is global::Orleans.Grain ? CityPowerInterfaces.PowerLineObserverFactory.Cast(@subscriber.AsReference()) : @subscriber} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("CityPowerInterfaces.CityPowerInterfaces.IPowerLine", 1529258251)]
    internal class PowerLineMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 1529258251;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 1529258251:  // IPowerLine
                        switch (methodId)
                        {
                            case -1348462830: 
                                return ((IPowerLine)grain).SetPowerCurrent((Int32)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            case -449473587: 
                                return ((IPowerLine)grain).GetCurrentPower().ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)t.Result; });
                            case 1042716812: 
                                return ((IPowerLine)grain).SubscribeForPowerNotifications((IPowerLineObserver)arguments[0]).ContinueWith(t => {if (t.Status == System.Threading.Tasks.TaskStatus.Faulted) throw t.Exception; return (object)null; });
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 1529258251:  // IPowerLine
                    switch (methodId)
                    {
                        case -1348462830:
                            return "SetPowerCurrent";
                    case -449473587:
                            return "GetCurrentPower";
                    case 1042716812:
                            return "SubscribeForPowerNotifications";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    public class PowerLineObserverFactory
    {
        

            public static CityPowerInterfaces.IPowerLineObserver Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return PowerLineObserverReference.Cast(grainRef);
            }

        private static global::Orleans.CodeGeneration.IGrainMethodInvoker methodInvoker;

        public async static System.Threading.Tasks.Task<CityPowerInterfaces.IPowerLineObserver> CreateObjectReference(CityPowerInterfaces.IPowerLineObserver obj)
        {
            if (methodInvoker == null) methodInvoker = new PowerLineObserverMethodInvoker();
            return PowerLineObserverFactory.Cast(await global::Orleans.Runtime.GrainReference.CreateObjectReference(obj, methodInvoker));
        }

        public static System.Threading.Tasks.Task DeleteObjectReference(CityPowerInterfaces.IPowerLineObserver reference)
        {
            return global::Orleans.Runtime.GrainReference.DeleteObjectReference(reference);
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
        [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
        [System.SerializableAttribute()]
        [global::Orleans.CodeGeneration.GrainReferenceAttribute("CityPowerInterfaces.CityPowerInterfaces.IPowerLineObserver")]
        internal class PowerLineObserverReference : global::Orleans.Runtime.GrainReference, global::Orleans.Runtime.IAddressable, CityPowerInterfaces.IPowerLineObserver
        {
            

            public static CityPowerInterfaces.IPowerLineObserver Cast(global::Orleans.Runtime.IAddressable grainRef)
            {
                
                return (CityPowerInterfaces.IPowerLineObserver) global::Orleans.Runtime.GrainReference.CastInternal(typeof(CityPowerInterfaces.IPowerLineObserver), (global::Orleans.Runtime.GrainReference gr) => { return new PowerLineObserverReference(gr);}, grainRef, 389679522);
            }
            
            protected internal PowerLineObserverReference(global::Orleans.Runtime.GrainReference reference) : 
                    base(reference)
            {
            }
            
            protected internal PowerLineObserverReference(SerializationInfo info, StreamingContext context) : 
                    base(info, context)
            {
            }
            
            protected override int InterfaceId
            {
                get
                {
                    return 389679522;
                }
            }
            
            public override string InterfaceName
            {
                get
                {
                    return "CityPowerInterfaces.CityPowerInterfaces.IPowerLineObserver";
                }
            }
            
            [global::Orleans.CodeGeneration.CopierMethodAttribute()]
            public static object _Copier(object original)
            {
                PowerLineObserverReference input = ((PowerLineObserverReference)(original));
                return ((PowerLineObserverReference)(global::Orleans.Runtime.GrainReference.CopyGrainReference(input)));
            }
            
            [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
            public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
            {
                PowerLineObserverReference input = ((PowerLineObserverReference)(original));
                global::Orleans.Runtime.GrainReference.SerializeGrainReference(input, stream, expected);
            }
            
            [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
            public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
            {
                return PowerLineObserverReference.Cast(((global::Orleans.Runtime.GrainReference)(global::Orleans.Runtime.GrainReference.DeserializeGrainReference(expected, stream))));
            }
            
            public override bool IsCompatible(int interfaceId)
            {
                return (interfaceId == this.InterfaceId);
            }
            
            protected override string GetMethodName(int interfaceId, int methodId)
            {
                return PowerLineObserverMethodInvoker.GetMethodName(interfaceId, methodId);
            }
            
            void CityPowerInterfaces.IPowerLineObserver.OverConsumption(int @power)
            {

                base.InvokeOneWayMethod(1671039887, new object[] {@power} );
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.MethodInvokerAttribute("CityPowerInterfaces.CityPowerInterfaces.IPowerLineObserver", 389679522)]
    internal class PowerLineObserverMethodInvoker : global::Orleans.CodeGeneration.IGrainMethodInvoker
    {
        
        int global::Orleans.CodeGeneration.IGrainMethodInvoker.InterfaceId
        {
            get
            {
                return 389679522;
            }
        }
        
        global::System.Threading.Tasks.Task<object> global::Orleans.CodeGeneration.IGrainMethodInvoker.Invoke(global::Orleans.Runtime.IAddressable grain, int interfaceId, int methodId, object[] arguments)
        {

            try
            {                    if (grain == null) throw new System.ArgumentNullException("grain");
                switch (interfaceId)
                {
                    case 389679522:  // IPowerLineObserver
                        switch (methodId)
                        {
                            case 1671039887: 
                                ((IPowerLineObserver)grain).OverConsumption((Int32)arguments[0]); return System.Threading.Tasks.Task.FromResult((object)true);
                            default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                        }
                    default:
                        throw new System.InvalidCastException("interfaceId="+interfaceId);
                }
            }
            catch(Exception ex)
            {
                var t = new System.Threading.Tasks.TaskCompletionSource<object>();
                t.SetException(ex);
                return t.Task;
            }
        }
        
        public static string GetMethodName(int interfaceId, int methodId)
        {

            switch (interfaceId)
            {
                
                case 389679522:  // IPowerLineObserver
                    switch (methodId)
                    {
                        case 1671039887:
                            return "OverConsumption";
                    
                        default: 
                            throw new NotImplementedException("interfaceId="+interfaceId+",methodId="+methodId);
                    }

                default:
                    throw new System.InvalidCastException("interfaceId="+interfaceId);
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.0.0")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [global::Orleans.CodeGeneration.RegisterSerializerAttribute()]
    internal class CityPowerInterfaces_PowerMeasurementSerialization
    {
        
        static CityPowerInterfaces_PowerMeasurementSerialization()
        {
            Register();
        }
        
        public static object DeepCopier(object original)
        {
            CityPowerInterfaces.PowerMeasurement input = ((CityPowerInterfaces.PowerMeasurement)(original));
            CityPowerInterfaces.PowerMeasurement result = new CityPowerInterfaces.PowerMeasurement();
            Orleans.Serialization.SerializationContext.Current.RecordObject(original, result);
            result.Id = input.Id;
            result.PowerConsumption = input.PowerConsumption;
            return result;
        }
        
        public static void Serializer(object untypedInput, Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            CityPowerInterfaces.PowerMeasurement input = ((CityPowerInterfaces.PowerMeasurement)(untypedInput));
            Orleans.Serialization.SerializationManager.SerializeInner(input.Id, stream, typeof(long));
            Orleans.Serialization.SerializationManager.SerializeInner(input.PowerConsumption, stream, typeof(int));
        }
        
        public static object Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            CityPowerInterfaces.PowerMeasurement result = new CityPowerInterfaces.PowerMeasurement();
            result.Id = ((long)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(long), stream)));
            result.PowerConsumption = ((int)(Orleans.Serialization.SerializationManager.DeserializeInner(typeof(int), stream)));
            return result;
        }
        
        public static void Register()
        {
            global::Orleans.Serialization.SerializationManager.Register(typeof(CityPowerInterfaces.PowerMeasurement), DeepCopier, Serializer, Deserializer);
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
