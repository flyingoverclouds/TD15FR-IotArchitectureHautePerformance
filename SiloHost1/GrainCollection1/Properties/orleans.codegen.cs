//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.34014
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
#if !EXCLUDE_CODEGEN
#pragma warning disable 162
#pragma warning disable 219
#pragma warning disable 693
#pragma warning disable 1591
#pragma warning disable 1998

namespace GrainCollection1
{
    using System.Collections.Generic;
    using System.Collections;
    using CityPowerInterfaces;
    using System;
    using Orleans.CodeGeneration;
    using Orleans;
    using System.Runtime.InteropServices;
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("GrainCollection1.GrainCollection1.Apartment")]
    public class ApartmentState : global::Orleans.CodeGeneration.GrainState, IApartmentState
    {
        

            public List<PowerMeasurement> PowerLines { get; set; }

            public Int32 CurrentPower { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("PowerLines", out value)) PowerLines = (List<PowerMeasurement>) value;
                if (values.TryGetValue("CurrentPower", out value)) CurrentPower = value is Int64 ? (Int32)(Int64)value : (Int32)value;
            }

            public override System.String ToString()
            {
                return System.String.Format("ApartmentState( PowerLines={0} CurrentPower={1} )", PowerLines, CurrentPower);
            }
        
        public ApartmentState() : 
                base("GrainCollection1.Apartment")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["PowerLines"] = this.PowerLines;
            result["CurrentPower"] = this.CurrentPower;
            return result;
        }
        
        private void InitStateFields()
        {
            this.PowerLines = new List<PowerMeasurement>();
            this.CurrentPower = default(Int32);
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            ApartmentState input = ((ApartmentState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            ApartmentState input = ((ApartmentState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            ApartmentState result = new ApartmentState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("GrainCollection1.GrainCollection1.Building")]
    public class BuildingState : global::Orleans.CodeGeneration.GrainState, IBuildingState
    {
        

            public List<PowerMeasurement> AppartmentsPower { get; set; }

            public Int32 CurrentPower { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("AppartmentsPower", out value)) AppartmentsPower = (List<PowerMeasurement>) value;
                if (values.TryGetValue("CurrentPower", out value)) CurrentPower = value is Int64 ? (Int32)(Int64)value : (Int32)value;
            }

            public override System.String ToString()
            {
                return System.String.Format("BuildingState( AppartmentsPower={0} CurrentPower={1} )", AppartmentsPower, CurrentPower);
            }
        
        public BuildingState() : 
                base("GrainCollection1.Building")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["AppartmentsPower"] = this.AppartmentsPower;
            result["CurrentPower"] = this.CurrentPower;
            return result;
        }
        
        private void InitStateFields()
        {
            this.AppartmentsPower = new List<PowerMeasurement>();
            this.CurrentPower = default(Int32);
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            BuildingState input = ((BuildingState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            BuildingState input = ((BuildingState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            BuildingState result = new BuildingState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
}
namespace CityPowerGrains
{
    using System;
    using Orleans.CodeGeneration;
    using Orleans;
    using CityPowerInterfaces;
    using System.Runtime.InteropServices;
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Orleans-CodeGenerator", "1.0.1053.48452")]
    [System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute()]
    [SerializableAttribute()]
    [global::Orleans.CodeGeneration.GrainStateAttribute("CityPowerGrains.CityPowerGrains.PowerLine")]
    public class PowerLineState : global::Orleans.CodeGeneration.GrainState, IPowerLineState
    {
        

            public Int32 CurrentPower { get; set; }

            public override void SetAll(System.Collections.Generic.IDictionary<string,object> values)
            {   
                object value;
                if (values == null) { InitStateFields(); return; }
                if (values.TryGetValue("CurrentPower", out value)) CurrentPower = value is Int64 ? (Int32)(Int64)value : (Int32)value;
            }

            public override System.String ToString()
            {
                return System.String.Format("PowerLineState( CurrentPower={0} )", CurrentPower);
            }
        
        public PowerLineState() : 
                base("CityPowerGrains.PowerLine")
        {
            this.InitStateFields();
        }
        
        public override System.Collections.Generic.IDictionary<string, object> AsDictionary()
        {
            System.Collections.Generic.Dictionary<string, object> result = new System.Collections.Generic.Dictionary<string, object>();
            result["CurrentPower"] = this.CurrentPower;
            return result;
        }
        
        private void InitStateFields()
        {
            this.CurrentPower = default(Int32);
        }
        
        [global::Orleans.CodeGeneration.CopierMethodAttribute()]
        public static object _Copier(object original)
        {
            PowerLineState input = ((PowerLineState)(original));
            return input.DeepCopy();
        }
        
        [global::Orleans.CodeGeneration.SerializerMethodAttribute()]
        public static void _Serializer(object original, global::Orleans.Serialization.BinaryTokenStreamWriter stream, System.Type expected)
        {
            PowerLineState input = ((PowerLineState)(original));
            input.SerializeTo(stream);
        }
        
        [global::Orleans.CodeGeneration.DeserializerMethodAttribute()]
        public static object _Deserializer(System.Type expected, global::Orleans.Serialization.BinaryTokenStreamReader stream)
        {
            PowerLineState result = new PowerLineState();
            result.DeserializeFrom(stream);
            return result;
        }
    }
}
#pragma warning restore 162
#pragma warning restore 219
#pragma warning restore 693
#pragma warning restore 1591
#pragma warning restore 1998
#endif
